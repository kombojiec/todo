{"version":3,"sources":["components/navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/Todos.tsx","pages/About.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","to","TodoForm","props","useState","title","setTitle","htmlFor","type","id","placeholder","value","onChange","event","target","onKeyPress","key","onAdd","TodoList","todos","onRemove","onToggle","length","map","todo","toString","checked","completed","onClick","Todos","setTodos","useEffect","JSON","parse","localStorage","getItem","prev","setItem","stringify","console","log","newTodo","Date","now","arr","window","confirm","filter","About","history","useHistory","push","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAGaA,EAAmB,WAE9B,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CAASC,GAAG,IAAID,UAAU,YAA1B,wBACA,qBAAIA,UAAU,YAAd,UACE,oBAAIA,UAAU,YAAd,SACE,cAAC,IAAD,CAASC,GAAG,IAAID,UAAU,YAA1B,oBAEF,oBAAIA,UAAU,YAAd,SACE,cAAC,IAAD,CAASC,GAAG,SAASD,UAAU,YAA/B,6B,uBCRCE,EAAoC,SAACC,GAEhD,MAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OACE,sBAAKN,UAAU,OAAf,UACE,uBAAOO,QAAQ,QAAQP,UAAU,cAAjC,kIAGA,uBACEQ,KAAK,OACLC,GAAG,QACHT,UAAU,cACVU,YAAY,uHACZC,MAAON,EACPO,SAtBgB,SAACC,GACrBP,EAASO,EAAMC,OAAOH,QAsBlBI,WAnBkB,SAACF,GACN,UAAdA,EAAMG,MACPb,EAAMc,MAAMZ,GACZC,EAAS,YCRFY,EAAoC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAElE,OACE,oBAAIrB,UAAU,OAAd,SACGmB,EAAMG,OAAS,EACdH,EAAMI,KAAI,SAAAC,GACR,OACE,qBAAIxB,UAAU,aAAd,UACE,wBAAOO,QAASiB,EAAKf,GAAGgB,WAAYzB,UAAU,cAA9C,UACE,uBAAOQ,KAAK,WAAWkB,QAASF,EAAKG,UAAW3B,UAAU,cAAcS,GAAIe,EAAKf,GAAGgB,WAAYb,SAAU,kBAAMS,EAASG,EAAKf,OAC9H,sBAAMT,UAAWwB,EAAKG,UAAW,kBAAmB,GAApD,SAAyDH,EAAKnB,WAE9D,wBAAQL,UAAU,eAAe4B,QAAS,kBAAMR,EAASI,EAAKf,KAA9D,sBAL4Be,EAAKf,OASzC,qICpBKoB,EAAkB,WAE7B,MAA0BzB,mBAAkB,IAA5C,mBAAOe,EAAP,KAAcW,EAAd,KAEAC,qBAAU,WACR,IAAMZ,EAAQa,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MAC1DL,GAAS,SAAAM,GAAI,OAAIjB,OAChB,IAEHY,qBAAU,WACRG,aAAaG,QAAQ,QAASL,KAAKM,UAAUnB,MAC5C,CAACA,IA8BJ,OACE,qCACE,cAAC,EAAD,CAAUF,MA9BK,SAACZ,GAClBkC,QAAQC,IAAInC,GACZ,IAAMoC,EAAgB,CACpBpC,QACAI,GAAIiC,KAAKC,MACThB,WAAW,GAEbG,GAAS,SAAAM,GAAI,OAAKK,GAAL,mBAAiBL,UAwB1B,cAAC,EAAD,CACEjB,MAAOA,EACPE,SAvBc,SAACZ,GACrB,IAAMmC,EAAG,YAAOzB,GAChByB,EAAIrB,KAAI,SAAAC,GAIN,OAHGA,EAAKf,KAAOA,IACbe,EAAKG,WAAaH,EAAKG,WAElBH,KAETM,GAAS,SAAAM,GAAI,OAAIQ,MAgBXxB,SAbc,SAACX,GACAoC,OAAOC,QAAQ,6DAElChB,GAAS,SAAAM,GAAI,OAAIA,EAAKW,QAAO,SAAAvB,GAAI,OAAIA,EAAKf,KAAOA,eCvC1CuC,EAAkB,WAE7B,IAAMC,EAAUC,cAEhB,OACE,qCACE,oBAAIlD,UAAU,eAAd,2HACA,mBAAGA,UAAU,qBAAb,2JAIA,wBAAQA,UAAU,gBAAgB4B,QAAS,kBAAMqB,EAAQE,KAAK,MAA9D,oHCQSC,EAfM,WAEnB,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,qBAAKpD,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqD,KAAK,IAAIC,OAAK,EAACC,UAAW1B,IACjC,cAAC,IAAD,CAAOwB,KAAK,SAASE,UAAWP,aCD3BQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.257cf2a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport const Navbar: React.FC = () => {\r\n\r\n  return (\r\n    <nav className=\"nav\">\r\n      <div className=\"nav__wrapper\">\r\n        <NavLink to=\"/\" className=\"nav__logo\">TypeScript</NavLink>\r\n        <ul className=\"nav__list\">\r\n          <li className=\"nav__item\">\r\n            <NavLink to=\"/\" className=\"nav__link\">ToDo</NavLink>\r\n            </li>\r\n          <li className=\"nav__item\">\r\n            <NavLink to=\"/about\" className=\"nav__link\">Info</NavLink>\r\n            </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}","import React, {useState} from 'react';\r\n\r\ninterface TodoFormProps{\r\n  onAdd(title: string): void\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = (props) => {\r\n\r\n  const [title, setTitle] = useState<string>('');\r\n\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(event.target.value)\r\n  }\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent) => {\r\n    if(event.key === 'Enter'){\r\n      props.onAdd(title);\r\n      setTitle('');\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className=\"form\">\r\n      <label htmlFor=\"title\" className=\"form__label\">\r\n        Введите название дела\r\n      </label>\r\n      <input \r\n        type=\"text\" \r\n        id=\"title\" \r\n        className=\"form__input\" \r\n        placeholder='Введите название дела'\r\n        value={title}\r\n        onChange={changeHandler}\r\n        onKeyPress={keyPressHandler}\r\n      />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { ITodo } from '../interfaces';\r\n\r\ntype TodoListProps = {\r\n  todos: ITodo[],\r\n  onToggle: (id: number) => void,\r\n  onRemove(id:number): void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({todos, onRemove, onToggle}) => {\r\n\r\n  return(\r\n    <ul className=\"todo\">\r\n      {todos.length > 0 ?\r\n        todos.map(todo => {\r\n          return(\r\n            <li className=\"todo__item\" key={todo.id}>\r\n              <label htmlFor={todo.id.toString()} className=\"todo__label\"  >\r\n                <input type=\"checkbox\" checked={todo.completed} className=\"todo__input\" id={todo.id.toString()} onChange={() => onToggle(todo.id)} /> \r\n                <span className={todo.completed? 'todo__completed': ''}>{todo.title}</span>\r\n              </label>\r\n                <button className=\"todo__button\" onClick={() => onRemove(todo.id)} >delete</button>\r\n            </li>\r\n          )\r\n        }):\r\n        <h1>Отдыхайте, дел нет...</h1>\r\n      }\r\n    </ul>\r\n  )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { TodoForm } from '../components/TodoForm';\r\nimport { TodoList } from '../components/TodoList';\r\nimport { ITodo } from '../interfaces';\r\n\r\nexport const Todos: React.FC = () => {\r\n\r\n  const [todos, setTodos] = useState<ITodo[]>([]);\r\n\r\n  useEffect(() => {\r\n    const todos = JSON.parse(localStorage.getItem('todos') || '[]')\r\n    setTodos(prev => todos)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('todos', JSON.stringify(todos));\r\n  }, [todos])\r\n\r\n  const AddHandler = (title: string) => {\r\n    console.log(title);\r\n    const newTodo: ITodo ={\r\n      title,\r\n      id: Date.now(),\r\n      completed: false\r\n    }\r\n    setTodos(prev => [newTodo, ...prev])\r\n  }\r\n\r\n  const toggleHandler = (id: number)  => {\r\n    const arr = [...todos]\r\n    arr.map(todo => {\r\n      if(todo.id === id){\r\n        todo.completed = !todo.completed;\r\n      }\r\n      return todo;\r\n    })\r\n    setTodos(prev => arr )\r\n  }\r\n\r\n  const removeHandler = (id: number)  => {\r\n    const confirmation = window.confirm('Вы уверены?');\r\n    if(confirmation){\r\n      setTodos(prev => prev.filter(todo => todo.id !== id));\r\n    }\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <TodoForm onAdd={AddHandler}/>\r\n        <TodoList \r\n          todos={todos}\r\n          onToggle={toggleHandler}\r\n          onRemove={removeHandler}\r\n        />\r\n    </>\r\n  )\r\n\r\n}","import React from 'react';\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nexport const About: React.FC = () => {\r\n\r\n  const history = useHistory();\r\n\r\n  return(\r\n    <>\r\n      <h1 className=\"about__title\">Страница информации</h1>\r\n      <p className=\"about__description\">\r\n        Lorem ipsum dolor sit amet consectetur, adipisicing elit. \r\n        Ab libero ipsam cupiditate pariatur incidunt assumenda id possimus, sint quo illum!\r\n      </p>\r\n      <button className=\"about__button\" onClick={() => history.push('/')} >Вернуться к списку</button>\r\n    </>\r\n  )\r\n\r\n}","import React from 'react';\nimport { Navbar } from './components/navbar';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport { Todos } from './pages/Todos';\nimport { About } from './pages/About';\n\n\nconst App:React.FC = () => {\n\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <div className=\"container\">\n        <Switch>\n          <Route path='/' exact component={Todos}/>\n          <Route path='/about' component={About}/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}